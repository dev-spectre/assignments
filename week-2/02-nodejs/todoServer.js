/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const crypto = require("crypto");
const fs = require("fs");

const persist = false;
const todos = persist? JSON.parse(fs.readFileSync("./todos.json", "utf-8")): [];

const app = express();
const port = 3005;

app.use(bodyParser.json());

app.get("/", function (req, res) {
  res.send("<h1>TODO SERVER</h1>");
});

app.get("/todos", function (req, res) {
  res.send(todos);
});

app.get("/todos/:id", function (req, res) {
  const todo = getTodo(todos, req.params.id);
  if (todo === null) {
    res.status(404).send("Not Found");
    return;
  }
  res.json(todo);
});

app.post("/todos", function (req, res) {
  const id = crypto.randomUUID();
  const todo = {
    id,
    title: req.body.title,
    description: req.body.description,
    completed: req.body.completed,
  };
  todos.push(todo);
  let isDataSaved = saveData(todos);
  if (!isDataSaved) {
    res.status(500).send("Failed to save data");
    return;
  }
  res.status(201).json({ id });
});

app.put("/todos/:id", function (req, res) {
  const todo = getTodo(todos, req.params.id);
  if (todo === null) {
    res.status(404).send("Not Found");
    return;
  }
  todo.title = req.body.title;
  todo.completed = req.body.completed;
  let isDataSaved = saveData(todos);
  if (!isDataSaved) {
    res.status(500).send("Failed to save data");
    return;
  }
  res.send();
});

app.delete("/todos/:id", function (req, res) {
  const index = getTodoIndex(todos, req.params.id);
  if (index === null) {
    res.status(404).send("Not Found");
    return;
  }
  todos.splice(index, 1);
  let isDataSaved = saveData(todos);
  if (!isDataSaved) {
    res.status(500).send("Failed to save data");
    return;
  }
  res.send();
});

app.all("*", function (req, res) {
  res.status(404).send("Not Found");
});

// app.listen(port, () => console.log("App live at port:", port));

function getTodo(todos, id) {
  for (let i = 0; i < todos.length; i++) {
    if (todos[i].id === id) {
      return todos[i];
    }
  }
  return null;
}

function getTodoIndex(todos, id) {
  for (let i = 0; i < todos.length; i++) {
    if (todos[i].id === id) return i;
  }
  return null;
}

function saveData(todos) {
  let isDataSaved = true;
  fs.writeFile("./todos.json", JSON.stringify(todos), "utf-8", function (err) {
    isDataSaved = false;
  });
  return isDataSaved;
}

module.exports = app;
